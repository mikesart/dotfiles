# http://mediadoneright.com/content/ultimate-git-ps1-bash-prompt

#  Customize BASH PS1 prompt to show current GIT repository and branch.
#  by Mike Stewart - http://MediaDoneRight.com

#  SETUP CONSTANTS
#  Bunch-o-predefined colors.  Makes reading code easier than escape sequences.
#  I don't remember where I found this.  o_O

# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"

# +-----------------+
# |color  | fg | bg |
# +-----------------+
# |black  | 30 | 40 |
# |red    | 30 | 40 |
# |green  | 32 | 42 |
# |yellow | 33 | 43 |
# |blue   | 34 | 44 |
# |magenta| 35 | 45 |
# |cyan   | 36 | 46 |
# |white  | 37 | 47 |
# +-----------------+
#
# tell how many colors your terminal supports:
#   tput colors
#
# Bump up to 256 colors:
#     export TERM=xterm-256color
#
# bash prompt howto: ANSI Escape Sequences: Colours and Cursor Movement
#   http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
terminal_colors()
{
    # bold: 1
    # dim:  2
    # underline: 4
    # blink: 5
    # reverse: 7
    # hidden: 8
    local YELLOW="\033[1;33m"
    local GRAY="\033[1;30m"
    local LIGHT_GRAY="\033[0;37m"
    local CYAN="\033[0;36m"
    local LIGHT_CYAN="\033[1;36m"
    local NO_COLOR="\033[0m"

    echo;
    echo "More info: http://misc.flogisoft.com/bash/tip_colors_and_formatting"
    echo "           https://wiki.archlinux.org/index.php/Color_Bash_Prompt"
    echo;
    echo -e "$YELLOW --- Terminal Color Chart --- $NO_COLOR"

    T='gYw'   # The test text

    echo -e "\n                 40m     41m     42m     43m     44m     45m     46m     47m";

    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m'    '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m'    '  36m' '1;36m' '  37m' '1;37m';
        do FG=${FGs// /}
        echo -en " $FGs \033[$FG  $T  "
        for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
            do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
        done
        echo;
    done
    echo
}

colortest()
{
    local i j c l b
    for i in {0..15}; do
        echo -ne "\e[38;5;${i}m ${i}\e[0m ";
    done
    echo
    echo
    for l in {0..1}; do
        for i in {0..5}; do
            for b in {0..2}; do
                for j in {0..5}; do
                    c=$((16+b*36+l*108+6*i+j))
                    printf "\e[38;5;%sm %3d\e[0m" $c $c;
                done
                echo -n "   "
            done
            echo
        done
        echo
    done
    for i in {232..256}; do
        printf "\e[38;5;%sm %3d\e[0m" $i $i;
    done
    echo
}

# Use like this: echo 'rainbox text foobar' | color_font yellow bold
color_font()
{
    gray="\033[0;37m"
    cyan="\033[0;36m"
    blue="\033[0;34m"
    green="\033[0;32m"
    yellow="\033[0;33m"
    red="\033[0;31m"
    purple="\033[0;35m"
    default="\033[m"
    color=\$${1:-default}
    # activate color passed as argument
    echo -ne "`eval echo ${color}`"
    case "$2" in
        'under') echo -ne "\e[4m" ;;
        'bold') echo -ne "\e[1m" ;;
        'dim') echo -ne "\e[2m" ;;
        'blink') echo -ne "\e[5m" ;;
        'rev') echo -ne "\e[7m" ;;
    esac
    cat
    echo -ne "${NORMAL}"
    tput sgr0
}

# http://unix.stackexchange.com/questions/124407/what-color-codes-can-i-use-in-my-ps1-prompt
function colorgrid( )
{
    iter=16
    while [ $iter -lt 52 ]
    do
        second=$[$iter+36]
        third=$[$second+36]
        four=$[$third+36]
        five=$[$four+36]
        six=$[$five+36]
        seven=$[$six+36]
        if [ $seven -gt 250 ];then seven=$[$seven-251]; fi

        echo -en "\033[38;5;$(echo $iter)m█ "
        printf "%03d" $iter
        echo -en "   \033[38;5;$(echo $second)m█ "
        printf "%03d" $second
        echo -en "   \033[38;5;$(echo $third)m█ "
        printf "%03d" $third
        echo -en "   \033[38;5;$(echo $four)m█ "
        printf "%03d" $four
        echo -en "   \033[38;5;$(echo $five)m█ "
        printf "%03d" $five
        echo -en "   \033[38;5;$(echo $six)m█ "
        printf "%03d" $six
        echo -en "   \033[38;5;$(echo $seven)m█ "
        printf "%03d" $seven

        iter=$[$iter+1]
        printf '\r\n'
    done
}

